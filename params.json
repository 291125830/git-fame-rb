{
  "name": "Git Fame",
  "tagline": "A command-line tool that helps you summarize and pretty-print git collaborators based on contributions",
  "body": "# git-fame\r\n[![Gem](https://img.shields.io/gem/dt/git_fame.svg)](https://rubygems.org/gems/git_fame)\r\n[![Gitter](https://img.shields.io/gitter/room/oleander/git-fame-rb.svg)](https://gitter.im/oleander/git-fame-rb)\r\n[![Travis](https://img.shields.io/travis/oleander/git-fame-rb.svg)](https://travis-ci.org/oleander/git-fame-rb)\r\n[![Coveralls](https://img.shields.io/coveralls/oleander/git-fame-rb.svg)](https://coveralls.io/github/oleander/git-fame-rb)\r\n[![My personal webpage](https://img.shields.io/badge/me-oleander.io-blue.svg)](http://oleander.io)\r\n\r\n`git-fame` is a command-line tool that helps you summarize and pretty-print collaborators in a git repository based on contributions.\r\n\r\n## Example output\r\n\r\nStatistics generated from this git repository using `git fame .`\r\n\r\n```\r\nStatistics based on master\r\nActive files: 21\r\nActive lines: 967\r\nTotal commits: 109\r\n\r\nNote: Files matching MIME type image, binary has been ignored\r\n\r\n+----------------+-----+---------+-------+---------------------+\r\n| name           | loc | commits | files | distribution (%)    |\r\n+----------------+-----+---------+-------+---------------------+\r\n| Linus Oleander | 914 | 106     | 21    | 94.5 / 97.2 / 100.0 |\r\n| f1yegor        | 47  | 2       | 7     |  4.9 /  1.8 / 33.3  |\r\n| David Selassie | 6   | 1       | 2     |  0.6 /  0.9 /  9.5  |\r\n+----------------+-----+---------+-------+---------------------+\r\n```\r\n\r\n## Installation\r\n\r\n`[sudo] gem install git_fame`\r\n\r\n## Usage\r\n\r\n### Command-line\r\n\r\nFrom a git repository run `git fame .`\r\n\r\n#### Options\r\n\r\n- `git fame --by-type` Group line counts by file extension (i.e. .rb, .erb, .yml). See the *by type* section below.\r\n- `git fame --exclude=path1/*,path2/*` Comma separated, [glob](https://en.wikipedia.org/wiki/Glob_(programming)) file path to exclude.\r\n- `git fame --include=path1/*,path2/*` Comma separated, [glob](https://en.wikipedia.org/wiki/Glob_(programming)) file path to include.\r\n- `git fame --sort=loc` Order table by `loc`. Available options are: `loc`, `files` and `commits`. Default is `loc`.\r\n- `git fame --hide-progressbar` Hide progressbar.\r\n- `git fame --whitespace` Ignore whitespace changes when blaming files. [More about git blame and whitespace](https://coderwall.com/p/x8xbnq/git-don-t-blame-people-for-changing-whitespaces-or-moving-code).\r\n- `git fame --repository=/path/to/repo` Git repository to be used. Default is the current folder.\r\n- `git fame --branch=master` Branch to run on. Default is what `HEAD` points to.\r\n- `git fame --format=output` Output format. Default is `pretty`. Additional: `csv`.\r\n- `git fame --after=2010-01-01` Only use commits after this date. Format: yyyy-mm-dd. Note that the given date is included.\r\n- `git fame --before=2016-02-01` Only use commits before this date. Format: yyyy-mm-dd. Note that the given date is included.\r\n- `git fame --verbose` Print shell commands used by `git-fame`.\r\n- `git fame --everything` Images and binaries are ignored by default. Include them as well.\r\n- `git fame --timeout` Set timeout in seconds for each git command.\r\n\r\n#### By type\r\n\r\n`--by-type` adds extra columns file types.\r\n\r\n```\r\n+----------------+-----+---------+-------+---------------------+---------+-----+----+---------+-----+\r\n| name           | loc | commits | files | distribution (%)    | unknown | yml | md | gemspec | rb  |\r\n+----------------+-----+---------+-------+---------------------+---------+-----+----+---------+-----+\r\n| Linus Oleander | 914 | 106     | 21    | 94.5 / 97.2 / 100.0 | 32      | 5   | 61 | 23      | 257 |\r\n| f1yegor        | 47  | 2       | 7     |  4.9 /  1.8 / 33.3  | 3       | 5   | 6  | 1       | 10  |\r\n| David Selassie | 6   | 1       | 2     |  0.6 /  0.9 /  9.5  | 2       | 0   | 3  | 0       | 0   |\r\n+----------------+-----+---------+-------+---------------------+---------+-----+----+---------+-----+\r\n```\r\n\r\n### Programmatically\r\n\r\nWant to work with the data before using it? Here's how.\r\n\r\n#### Constructor arguments\r\n\r\n`options` is a hash with most of the arguments passed to the binary defined above.\r\nTake a look at the [bin/git-fame](bin/git-fame) file for more information.\r\n\r\n``` ruby\r\nrepository = GitFame::Base.new(options)\r\n```\r\n\r\n#### Print table\r\n\r\n`repository.pretty_puts` outputs the statistics as an ascii table.\r\n\r\n\r\n#### Print csv table to console\r\n\r\n`repository.csv_puts` outputs the statistics as csv.\r\n\r\n#### Statistics\r\n\r\n##### GitFame\r\n\r\n- `repository.loc` (Fixnum) Total number of lines.\r\n- `repository.commits` (Fixnum) Total number of commits.\r\n- `repository.files` (Fixnum) Total number of files.\r\n- `repository.authors` (Array< Author >) All authors.\r\n\r\n##### Author\r\n\r\n`author = repository.authors.first`\r\n\r\n- Formated\r\n  - `author.loc` (String) Number of lines.\r\n  - `author.commits` (String) Number of commits.\r\n  - `author.files` (String) Number of files changed.\r\n- Non formated\r\n  - `author.distribution` (String) Distribution (in %) between users (loc/commits/files)\r\n  - `author.raw_loc` (Fixnum) Number of lines.\r\n  - `author.raw_commits` (Fixnum) Number of commits.\r\n  - `author.raw_files` (Fixnum) Number of files changed.\r\n  - `author.file_type_counts` (Array) File types (k) and loc (v)\r\n\r\n## Testing\r\n\r\n1. Download fixtures (`spec/fixtures`) using `git submodule update --init`.\r\n2. Run rspec using `bundle exec rspec`.\r\n\r\nNote that `puts` has been disabled to avoid unnecessary output during testing.\r\nVisit `spec/spec_helper.rb` to enable it again.\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## Requirements\r\n\r\n*GitFame* should work on all Unix based operating system with Git installed.\r\n\r\n## License\r\n\r\n*GitFame* is released under the *MIT license*.\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}